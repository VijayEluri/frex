package z.contrib.fractals;

import z.compiler.CompiledCode;
import z.core.Fractal;
import z.core.Region;

/**
 * <pre>
 *       z' = ${fractalCode}
 * </pre>
 */
public final class Mandelbrot${fractalName} extends Fractal implements CompiledCode {

    public Region getStartRegion() {
        if (isJuliaMode()) {
            return new Region(0, 0, 1.6);
        }
        return new Region(-0.6, 0, 1.6);
    }

    public int compute(final double px,
                       final double py,
                       final double[] xValues,
                       final double[] yValues) {
        final int iterMax = this.iterMax;
        final double rr = this.bailOutSqr;

        final double cx, cy;
        double zx, zy;

        if (this.juliaMode) {
            cx = this.juliaCX;
            cy = this.juliaCY;
            zx = px;
            zy = py;
        } else {
            cx = px;
            cy = py;
            zx = 0.0;
            zy = 0.0;
        }

${variableDeclarations}

        for (int iter = 0; iter < iterMax; iter++) {

${variableAssignments}
            if (zxx + zyy > rr) {
                return iter;
            }

            xValues[iter] = _zx;
            yValues[iter] = _zy;
            zx = _zx;
            zy = _zy;
        }
        return iterMax;
    }
}
